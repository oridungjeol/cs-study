# 고급 언어와 저급 언어, 그리고 컴파일 & 링킹 과정

## 1. 고급언어와 저급언어

우리가 쓰는 **C**, **Java** 같은 언어는 사람이 이해하기 쉽게 만든 **고급 언어**.  
컴퓨터가 직접 이해하는 언어는 0과 1로 된 **기계어** 같은 **저급 언어**.

> **고급 언어로 쓴 코드는 반드시 저급 언어로 변환되어야 실행할 수 있다.**

---

## 2. 저급 언어 종류

- **기계어**: 0과 1로 이루어진 컴퓨터가 직접 실행하는 언어
- **어셈블리어**: 기계어를 사람이 읽기 쉽게 기호로 표현한 언어

---

## 3. 고급 언어가 저급 언어로 변환되는 두 가지 방식

고급 언어로 작성한 소스 코드는 결국 저급 언어(기계어)로 변환되어 실행됨.  
그 변환 방식은 크게 두 가지로 나뉨:

- **컴파일 방식**
- **인터프리터 방식**

---

### 🚀 1) 컴파일 언어

- 컴파일 방식으로 작동하는 프로그래밍 언어.
- 컴파일러가 **소스 코드 전체를 한 번에 저급 언어로 변환**.
- 대표적인 컴파일 언어: **C**

#### 컴파일 과정

- 컴파일러가 소스 코드를 처음부터 끝까지 검사하며 문법 오류와 실행 가능 여부를 확인.
- 오류가 없으면 전체 코드를 기계어로 변환하여 **목적 코드** 생성.

#### 장단점

변환된 실행 파일은 CPU가 바로 실행 가능해 **빠른 속도 제공**  
컴파일 시간 필요, 오류 발생 시 전체 코드를 다시 컴파일해야 함

---

### 2) 인터프리터 언어

- 인터프리터 방식으로 작동하는 프로그래밍 언어.
- 인터프리터가 **소스 코드를 한 줄씩 순차적으로 읽고 해석하여 실행**.
- 대표적인 인터프리터 언어: **Python**

#### 실행 과정

- 코드를 한 줄씩 저급 언어로 변환하며 즉시 실행.
- 코드 중간에 오류가 있어도, 오류 이전까지는 실행 가능.

#### 장단점

실행 전 전체 컴파일 과정이 없어 즉시 실행 가능하며 디버깅이 편리  
실행 시 계속 해석 작업을 해야 해서 실제 실행 속도는 느림

---

## 4. 컴파일 언어 vs 인터프리터 언어

| 구분             | 인터프리터 언어               | 컴파일 언어                      |
|------------------|------------------------------|----------------------------------|
| 실행 전          | 해석만, 즉시 실행 가능        | 전체를 기계어로 변환(컴파일) 필요 |
| 첫 실행 속도     | **빠름 (바로 실행)**          | 느림 (컴파일 시간 필요)          |
| 실제 실행 속도   | 느림 (계속 해석)              | **빠름 (바로 기계어 실행)**       |
| 개발/디버깅      | 편리, 즉시 결과 확인          | 수정 후 다시 컴파일 필요          |

####  요약

- 컴파일 언어는 **실행 파일을 미리 만들어 두어 실행 속도가 빠름**.
- 인터프리터 언어는 **즉시 실행 가능하지만 실행 중 해석 때문에 느림**.
- 개발자 용도와 목적에 따라 적합한 방식을 선택하여 사용함.

---

## 5. 목적 파일 vs 실행 파일

- **목적 코드** = 컴파일러를 통해 저급 언어(기계어)로 변환된 코드.
- 목적 코드로 이루어진 파일을 **목적 파일**이라고 한다.

**목적 파일은 실행 파일을 만들기 위한 중간 단계의 파일**로써  
아직 완전한 프로그램이 아니기 때문에 바로 실행할 수 없다.  
필요한 라이브러리 및 다른 목적 코드들과 결합해서 **실행 파일**로 만들어야 하며  
이 과정을 **링킹(Linking)** 이라고 한다.

---

## 6. 링킹(Linking)

### 링킹의 정의

**링킹은 여러 개의 목적 파일(.o, .obj)과 라이브러리들을 연결해서  
운영체제가 바로 실행할 수 있는 실행 파일(.exe, ELF)을 만드는 과정이다.**
